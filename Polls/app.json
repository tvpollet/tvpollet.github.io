[{"name":"app.r","content":"library(shiny)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidytext)\nlibrary(wordcloud2)\n\n# Tufte-inspired theme\ntheme_tufte_custom <- function() {\n  theme_minimal() +\n    theme(\n      text = element_text(family = \"serif\", size = 12),\n      plot.title = element_text(size = 14, hjust = 0, face = \"plain\"),\n      axis.title = element_text(size = 11),\n      axis.text = element_text(size = 10, color = \"gray30\"),\n      panel.grid.major.y = element_line(color = \"gray85\", linewidth = 0.3),\n      panel.grid.major.x = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.ticks = element_line(color = \"gray30\"),\n      axis.line.x = element_line(color = \"gray30\"),\n      legend.position = \"none\",\n      plot.margin = margin(15, 15, 15, 15)\n    )\n}\n\n# Muted color palette (Tufte-inspired)\ntufte_colors <- c(\"#1f77b4\", \"#ff7f0e\", \"#2ca02c\", \"#d62728\", \"#9467bd\", \"#8c564b\")\n\nui <- fluidPage(\n  tags$head(\n    tags$style(HTML(\"\n      @import url('https://fonts.googleapis.com/css2?family=Merriweather:wght@300;400&family=Source+Sans+Pro:wght@300;400&display=swap');\n      \n      body {\n        font-family: 'Source Sans Pro', sans-serif;\n        background-color: #fafafa;\n        color: #333;\n      }\n      \n      h2, h3, h4 {\n        font-family: 'Merriweather', serif;\n        font-weight: 300;\n        color: #2c3e50;\n      }\n      \n      .admin-panel {\n        background-color: #f8f9fa;\n        padding: 20px;\n        border-radius: 4px;\n        margin-bottom: 25px;\n        border-left: 4px solid #1f77b4;\n      }\n      \n      .poll-question {\n        background-color: white;\n        padding: 30px;\n        border-radius: 4px;\n        box-shadow: 0 1px 3px rgba(0,0,0,0.06);\n        margin-bottom: 20px;\n      }\n      \n      .btn-poll {\n        margin: 5px;\n        padding: 10px 20px;\n        border: 1px solid #1f77b4;\n        background-color: white;\n        color: #1f77b4;\n        border-radius: 4px;\n        transition: all 0.2s;\n      }\n      \n      .btn-poll:hover {\n        background-color: #1f77b4;\n        color: white;\n      }\n      \n      .btn-poll.active {\n        background-color: #1f77b4;\n        color: white;\n      }\n      \n      .radio-option {\n        padding: 12px;\n        margin: 8px 0;\n        border: 2px solid #e0e0e0;\n        border-radius: 4px;\n        cursor: pointer;\n        transition: all 0.2s;\n      }\n      \n      .radio-option:hover {\n        border-color: #1f77b4;\n        background-color: #f8f9fa;\n      }\n      \n      .n-display {\n        font-family: 'Merriweather', serif;\n        font-style: italic;\n        color: #666;\n        font-size: 0.95em;\n      }\n    \"))\n  ),\n  \n  titlePanel(\n    div(style = \"display: flex; justify-content: space-between; align-items: center; padding: 10px 0; border-bottom: 1px solid #e0e0e0;\",\n      h2(\"Live Polling System\", style = \"margin: 0;\"),\n      actionButton(\"toggle_admin\", \"Admin Mode\", \n                   style = \"background-color: #1f77b4; color: white; border: none; padding: 10px 20px; border-radius: 4px;\")\n    )\n  ),\n  \n  # Admin Panel\n  conditionalPanel(\n    condition = \"input.toggle_admin % 2 == 1\",\n    div(class = \"admin-panel\",\n      h3(\"Admin Controls\"),\n      fluidRow(\n        column(12,\n          div(style = \"margin-bottom: 15px;\",\n            actionButton(\"poll1\", \"Poll 1: Multiple Choice\", class = \"btn-poll\"),\n            actionButton(\"poll2\", \"Poll 2: Text Response\", class = \"btn-poll\"),\n            actionButton(\"poll3\", \"Poll 3: Research Methods\", class = \"btn-poll\")\n          ),\n          actionButton(\"show_results\", \"Toggle Results Display\", \n                       style = \"background-color: #ff7f0e; color: white; border: none; padding: 10px 20px; border-radius: 4px;\"),\n          actionButton(\"reset_poll\", \"Reset Current Poll\", \n                       style = \"background-color: #d62728; color: white; border: none; padding: 10px 20px; border-radius: 4px; margin-left: 10px;\")\n        )\n      )\n    )\n  ),\n  \n  # Main Content\n  fluidRow(\n    column(12,\n      # Voting Interface\n      conditionalPanel(\n        condition = \"output.show_voting\",\n        div(class = \"poll-question\",\n          uiOutput(\"poll_question_ui\"),\n          uiOutput(\"poll_options_ui\"),\n          br(),\n          actionButton(\"submit_vote\", \"Submit Vote\", \n                       style = \"background-color: #2ca02c; color: white; border: none; padding: 12px 30px; border-radius: 4px; font-size: 16px;\"),\n          uiOutput(\"vote_confirmation\")\n        )\n      ),\n      \n      # Results Display\n      conditionalPanel(\n        condition = \"output.show_results_panel\",\n        div(class = \"poll-question\",\n          h3(textOutput(\"results_title\")),\n          conditionalPanel(\n            condition = \"output.is_multiple_choice\",\n            plotOutput(\"results_plot\", height = \"450px\")\n          ),\n          conditionalPanel(\n            condition = \"!output.is_multiple_choice\",\n            wordcloud2Output(\"wordcloud\", height = \"400px\"),\n            br(),\n            h4(\"All Responses:\"),\n            div(style = \"max-height: 300px; overflow-y: auto; padding: 15px; background-color: #f8f9fa; border-radius: 4px;\",\n              uiOutput(\"text_responses\")\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Define polls\n  polls <- list(\n    poll1 = list(\n      question = \"What is your primary research method?\",\n      type = \"multiple\",\n      options = c(\"Experimental\", \"Observational\", \"Meta-analysis\", \"Qualitative\", \"Mixed Methods\")\n    ),\n    poll2 = list(\n      question = \"What challenges do you face in your research?\",\n      type = \"text\",\n      options = NULL\n    ),\n    poll3 = list(\n      question = \"How often do you use R for data analysis?\",\n      type = \"multiple\",\n      options = c(\"Daily\", \"Weekly\", \"Monthly\", \"Rarely\", \"Never\")\n    )\n  )\n  \n  # Reactive values\n  rv <- reactiveValues(\n    current_poll = NULL,\n    show_results = FALSE,\n    responses = list(\n      poll1 = data.frame(response = character(), stringsAsFactors = FALSE),\n      poll2 = data.frame(response = character(), stringsAsFactors = FALSE),\n      poll3 = data.frame(response = character(), stringsAsFactors = FALSE)\n    ),\n    voted = FALSE\n  )\n  \n  # Poll selection\n  observeEvent(input$poll1, {\n    rv$current_poll <- \"poll1\"\n    rv$show_results <- FALSE\n    rv$voted <- FALSE\n  })\n  \n  observeEvent(input$poll2, {\n    rv$current_poll <- \"poll2\"\n    rv$show_results <- FALSE\n    rv$voted <- FALSE\n  })\n  \n  observeEvent(input$poll3, {\n    rv$current_poll <- \"poll3\"\n    rv$show_results <- FALSE\n    rv$voted <- FALSE\n  })\n  \n  # Toggle results\n  observeEvent(input$show_results, {\n    rv$show_results <- !rv$show_results\n  })\n  \n  # Reset poll\n  observeEvent(input$reset_poll, {\n    req(rv$current_poll)\n    rv$responses[[rv$current_poll]] <- data.frame(response = character(), stringsAsFactors = FALSE)\n  })\n  \n  # Submit vote\n  observeEvent(input$submit_vote, {\n    req(rv$current_poll)\n    poll <- polls[[rv$current_poll]]\n    \n    if (poll$type == \"multiple\") {\n      req(input$poll_choice)\n      new_response <- data.frame(response = input$poll_choice, stringsAsFactors = FALSE)\n      rv$responses[[rv$current_poll]] <- rbind(rv$responses[[rv$current_poll]], new_response)\n      rv$voted <- TRUE\n    } else if (poll$type == \"text\") {\n      req(input$text_input)\n      if (nchar(trimws(input$text_input)) > 0) {\n        new_response <- data.frame(response = trimws(input$text_input), stringsAsFactors = FALSE)\n        rv$responses[[rv$current_poll]] <- rbind(rv$responses[[rv$current_poll]], new_response)\n        updateTextAreaInput(session, \"text_input\", value = \"\")\n        rv$voted <- TRUE\n      }\n    }\n  })\n  \n  # UI outputs\n  output$poll_question_ui <- renderUI({\n    req(rv$current_poll)\n    h3(polls[[rv$current_poll]]$question)\n  })\n  \n  output$poll_options_ui <- renderUI({\n    req(rv$current_poll)\n    poll <- polls[[rv$current_poll]]\n    \n    if (rv$voted) {\n      return(div(style = \"color: #2ca02c; font-size: 16px; margin-top: 15px;\",\n                 icon(\"check-circle\"),\n                 \" Vote submitted. Waiting for results...\"))\n    }\n    \n    if (poll$type == \"multiple\") {\n      radioButtons(\"poll_choice\", NULL, \n                   choices = poll$options,\n                   selected = character(0))\n    } else {\n      textAreaInput(\"text_input\", NULL, \n                    placeholder = \"Type your response here...\",\n                    rows = 5,\n                    width = \"100%\")\n    }\n  })\n  \n  output$vote_confirmation <- renderUI({\n    if (rv$voted) {\n      div(style = \"margin-top: 15px; padding: 12px; background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 4px; color: #155724;\",\n          icon(\"check\"), \" Thank you for voting!\"\n      )\n    }\n  })\n  \n  output$results_title <- renderText({\n    req(rv$current_poll)\n    n <- nrow(rv$responses[[rv$current_poll]])\n    paste0(\"Results (n = \", n, \")\")\n  })\n  \n  output$results_plot <- renderPlot({\n    req(rv$current_poll)\n    req(rv$show_results)\n    poll <- polls[[rv$current_poll]]\n    req(poll$type == \"multiple\")\n    \n    responses <- rv$responses[[rv$current_poll]]\n    \n    if (nrow(responses) == 0) {\n      return(ggplot() + \n               annotate(\"text\", x = 0.5, y = 0.5, label = \"No votes yet\", \n                        size = 6, color = \"gray50\") +\n               theme_void())\n    }\n    \n    # Aggregate data\n    plot_data <- responses %>%\n      group_by(response) %>%\n      summarise(count = n(), .groups = \"drop\") %>%\n      mutate(\n        percentage = count / sum(count) * 100,\n        response = factor(response, levels = poll$options)\n      ) %>%\n      complete(response = factor(poll$options, levels = poll$options), \n               fill = list(count = 0, percentage = 0))\n    \n    # Create plot\n    ggplot(plot_data, aes(x = response, y = count)) +\n      geom_bar(stat = \"identity\", fill = tufte_colors[1], width = 0.7, alpha = 0.9) +\n      geom_text(aes(label = sprintf(\"%d\\n(%.1f%%)\", count, percentage)),\n                vjust = -0.5, size = 3.5, family = \"sans\", color = \"gray30\") +\n      labs(\n        x = NULL,\n        y = \"Number of responses\",\n        caption = paste(\"Total responses:\", sum(plot_data$count))\n      ) +\n      scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +\n      theme_tufte_custom() +\n      theme(\n        axis.text.x = element_text(angle = 25, hjust = 1, size = 11),\n        plot.caption = element_text(size = 9, color = \"gray50\", hjust = 1, \n                                     family = \"serif\", face = \"italic\")\n      )\n  })\n  \n  output$wordcloud <- renderWordcloud2({\n    req(rv$current_poll)\n    req(rv$show_results)\n    poll <- polls[[rv$current_poll]]\n    req(poll$type == \"text\")\n    \n    responses <- rv$responses[[rv$current_poll]]\n    \n    if (nrow(responses) == 0) {\n      return(NULL)\n    }\n    \n    # Create word frequency\n    words <- responses %>%\n      unnest_tokens(word, response) %>%\n      anti_join(stop_words, by = \"word\") %>%\n      filter(nchar(word) > 3) %>%\n      count(word, sort = TRUE) %>%\n      head(50)\n    \n    if (nrow(words) > 0) {\n      wordcloud2(words, size = 0.7, color = rep_len(tufte_colors, nrow(words)),\n                 backgroundColor = \"#fafafa\", fontFamily = \"Source Sans Pro\")\n    }\n  })\n  \n  output$text_responses <- renderUI({\n    req(rv$current_poll)\n    req(rv$show_results)\n    responses <- rv$responses[[rv$current_poll]]$response\n    \n    if (length(responses) == 0) {\n      return(p(\"No responses yet\", style = \"color: gray50; font-style: italic;\"))\n    }\n    \n    lapply(seq_along(responses), function(i) {\n      div(style = \"margin: 8px 0; padding: 10px; border-left: 3px solid #1f77b4; background-color: white;\",\n          p(responses[i], style = \"margin: 0; color: #555;\")\n      )\n    })\n  })\n  \n  # Control visibility\n  output$show_voting <- reactive({\n    !is.null(rv$current_poll) && !rv$show_results\n  })\n  outputOptions(output, \"show_voting\", suspendWhenHidden = FALSE)\n  \n  output$show_results_panel <- reactive({\n    !is.null(rv$current_poll) && rv$show_results\n  })\n  outputOptions(output, \"show_results_panel\", suspendWhenHidden = FALSE)\n  \n  output$is_multiple_choice <- reactive({\n    req(rv$current_poll)\n    polls[[rv$current_poll]]$type == \"multiple\"\n  })\n  outputOptions(output, \"is_multiple_choice\", suspendWhenHidden = FALSE)\n}\n\nshinyApp(ui = ui, server = server)","type":"text"}]
