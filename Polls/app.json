[{"name":"app.r","content":"library(shiny)\nlibrary(bslib)\n\nui <- page_sidebar(\n  title = \"Live Polling System\",\n  sidebar = sidebar(\n    id = \"admin_sidebar\",\n    open = FALSE,\n    h4(\"Admin Controls\"),\n    actionButton(\"poll1\", \"Poll 1: Multiple Choice\", \n                 class = \"btn-primary w-100 mb-2\"),\n    actionButton(\"poll2\", \"Poll 2: Text Response\", \n                 class = \"btn-primary w-100 mb-2\"),\n    actionButton(\"poll3\", \"Poll 3: Research Methods\", \n                 class = \"btn-primary w-100 mb-2\"),\n    hr(),\n    actionButton(\"show_results\", \"Toggle Results\", \n                 class = \"btn-warning w-100 mb-2\"),\n    actionButton(\"reset_poll\", \"Reset Current Poll\", \n                 class = \"btn-danger w-100\")\n  ),\n  \n  # Main content\n  layout_columns(\n    card(\n      card_header(\n        div(\n          style = \"display: flex; justify-content: space-between; align-items: center;\",\n          textOutput(\"poll_title\"),\n          actionButton(\"toggle_admin\", \"Admin\", class = \"btn-sm btn-secondary\")\n        )\n      ),\n      card_body(\n        # Voting Interface\n        conditionalPanel(\n          condition = \"output.show_voting\",\n          uiOutput(\"poll_options_ui\"),\n          br(),\n          actionButton(\"submit_vote\", \"Submit Vote\", class = \"btn-success\"),\n          uiOutput(\"vote_confirmation\")\n        ),\n        \n        # Results Display\n        conditionalPanel(\n          condition = \"output.show_results_panel\",\n          h4(textOutput(\"results_title\")),\n          conditionalPanel(\n            condition = \"output.is_multiple_choice\",\n            plotOutput(\"results_plot\", height = \"400px\")\n          ),\n          conditionalPanel(\n            condition = \"!output.is_multiple_choice\",\n            h5(\"Word Frequency:\"),\n            plotOutput(\"word_freq_plot\", height = \"300px\"),\n            hr(),\n            h5(\"All Responses:\"),\n            div(\n              style = \"max-height: 300px; overflow-y: auto; padding: 10px; background-color: #f8f9fa; border-radius: 4px;\",\n              uiOutput(\"text_responses\")\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  # Define polls\n  polls <- list(\n    poll1 = list(\n      question = \"What is your primary research method?\",\n      type = \"multiple\",\n      options = c(\"Experimental\", \"Observational\", \"Meta-analysis\", \"Qualitative\", \"Mixed Methods\")\n    ),\n    poll2 = list(\n      question = \"What challenges do you face in your research?\",\n      type = \"text\",\n      options = NULL\n    ),\n    poll3 = list(\n      question = \"How often do you use R for data analysis?\",\n      type = \"multiple\",\n      options = c(\"Daily\", \"Weekly\", \"Monthly\", \"Rarely\", \"Never\")\n    )\n  )\n  \n  # Reactive values\n  rv <- reactiveValues(\n    current_poll = NULL,\n    show_results = FALSE,\n    responses = list(\n      poll1 = character(0),\n      poll2 = character(0),\n      poll3 = character(0)\n    ),\n    voted = FALSE\n  )\n  \n  # Toggle admin sidebar\n  observeEvent(input$toggle_admin, {\n    if (input$admin_sidebar) {\n      update_sidebar(\"admin_sidebar\", show = FALSE)\n    } else {\n      update_sidebar(\"admin_sidebar\", show = TRUE)\n    }\n  })\n  \n  # Poll selection\n  observeEvent(input$poll1, {\n    rv$current_poll <- \"poll1\"\n    rv$show_results <- FALSE\n    rv$voted <- FALSE\n  })\n  \n  observeEvent(input$poll2, {\n    rv$current_poll <- \"poll2\"\n    rv$show_results <- FALSE\n    rv$voted <- FALSE\n  })\n  \n  observeEvent(input$poll3, {\n    rv$current_poll <- \"poll3\"\n    rv$show_results <- FALSE\n    rv$voted <- FALSE\n  })\n  \n  # Toggle results\n  observeEvent(input$show_results, {\n    rv$show_results <- !rv$show_results\n  })\n  \n  # Reset poll\n  observeEvent(input$reset_poll, {\n    req(rv$current_poll)\n    rv$responses[[rv$current_poll]] <- character(0)\n    showNotification(\"Poll reset successfully\", type = \"message\")\n  })\n  \n  # Submit vote\n  observeEvent(input$submit_vote, {\n    req(rv$current_poll)\n    poll <- polls[[rv$current_poll]]\n    \n    if (poll$type == \"multiple\") {\n      req(input$poll_choice)\n      rv$responses[[rv$current_poll]] <- c(rv$responses[[rv$current_poll]], input$poll_choice)\n      rv$voted <- TRUE\n      showNotification(\"Vote submitted!\", type = \"message\")\n    } else if (poll$type == \"text\") {\n      req(input$text_input)\n      if (nchar(trimws(input$text_input)) > 0) {\n        rv$responses[[rv$current_poll]] <- c(rv$responses[[rv$current_poll]], trimws(input$text_input))\n        updateTextAreaInput(session, \"text_input\", value = \"\")\n        rv$voted <- TRUE\n        showNotification(\"Response submitted!\", type = \"message\")\n      }\n    }\n  })\n  \n  # UI outputs\n  output$poll_title <- renderText({\n    if (is.null(rv$current_poll)) {\n      \"Waiting for poll to start...\"\n    } else {\n      polls[[rv$current_poll]]$question\n    }\n  })\n  \n  output$poll_options_ui <- renderUI({\n    req(rv$current_poll)\n    poll <- polls[[rv$current_poll]]\n    \n    if (rv$voted) {\n      return(\n        div(\n          class = \"alert alert-success\",\n          icon(\"check-circle\"),\n          \" Vote submitted. Waiting for results...\"\n        )\n      )\n    }\n    \n    if (poll$type == \"multiple\") {\n      radioButtons(\"poll_choice\", NULL, \n                   choices = poll$options,\n                   selected = character(0))\n    } else {\n      textAreaInput(\"text_input\", NULL, \n                    placeholder = \"Type your response here...\",\n                    rows = 5,\n                    width = \"100%\")\n    }\n  })\n  \n  output$vote_confirmation <- renderUI({\n    if (rv$voted) {\n      div(\n        class = \"alert alert-success mt-3\",\n        icon(\"check\"), \" Thank you for voting!\"\n      )\n    }\n  })\n  \n  output$results_title <- renderText({\n    req(rv$current_poll)\n    n <- length(rv$responses[[rv$current_poll]])\n    paste0(\"Results (n = \", n, \")\")\n  })\n  \n  output$results_plot <- renderPlot({\n    req(rv$current_poll)\n    req(rv$show_results)\n    poll <- polls[[rv$current_poll]]\n    req(poll$type == \"multiple\")\n    \n    responses <- rv$responses[[rv$current_poll]]\n    \n    if (length(responses) == 0) {\n      plot(1, type = \"n\", axes = FALSE, xlab = \"\", ylab = \"\", main = \"No votes yet\")\n      return()\n    }\n    \n    # Count responses\n    counts <- table(factor(responses, levels = poll$options))\n    percentages <- prop.table(counts) * 100\n    \n    # Create bar plot with Tufte-inspired minimal design\n    par(mar = c(7, 4, 2, 2), family = \"serif\")\n    \n    bp <- barplot(\n      as.numeric(counts),\n      names.arg = names(counts),\n      las = 2,\n      ylab = \"Number of responses\",\n      col = \"#4A90E2\",\n      border = NA,\n      ylim = c(0, max(counts) * 1.2)\n    )\n    \n    # Add horizontal grid lines only\n    abline(h = pretty(0:max(counts)), col = \"gray85\", lty = 1, lwd = 0.5)\n    \n    # Re-draw bars on top of grid\n    barplot(\n      as.numeric(counts),\n      names.arg = names(counts),\n      las = 2,\n      col = \"#4A90E2\",\n      border = NA,\n      add = TRUE,\n      axes = FALSE\n    )\n    \n    # Add value labels\n    text(\n      x = bp,\n      y = as.numeric(counts),\n      labels = sprintf(\"%d\\n(%.1f%%)\", counts, percentages),\n      pos = 3,\n      cex = 0.9,\n      col = \"gray30\"\n    )\n    \n    # Add caption\n    mtext(\n      paste(\"Total responses:\", sum(counts)),\n      side = 1,\n      line = 6,\n      adj = 1,\n      cex = 0.8,\n      col = \"gray50\",\n      font = 3\n    )\n  })\n  \n  output$word_freq_plot <- renderPlot({\n    req(rv$current_poll)\n    req(rv$show_results)\n    poll <- polls[[rv$current_poll]]\n    req(poll$type == \"text\")\n    \n    responses <- rv$responses[[rv$current_poll]]\n    \n    if (length(responses) == 0) {\n      plot(1, type = \"n\", axes = FALSE, xlab = \"\", ylab = \"\", main = \"No responses yet\")\n      return()\n    }\n    \n    # Simple stop words\n    stop_words <- c(\"the\", \"a\", \"an\", \"and\", \"or\", \"but\", \"in\", \"on\", \"at\", \n                    \"to\", \"for\", \"of\", \"with\", \"by\", \"from\", \"as\", \"is\", \"was\",\n                    \"are\", \"been\", \"be\", \"have\", \"has\", \"had\", \"do\", \"does\", \"did\",\n                    \"will\", \"would\", \"could\", \"should\", \"may\", \"might\", \"must\",\n                    \"can\", \"this\", \"that\", \"these\", \"those\", \"i\", \"you\", \"he\", \n                    \"she\", \"it\", \"we\", \"they\", \"my\", \"your\", \"his\", \"her\", \"its\",\n                    \"our\", \"their\")\n    \n    # Extract and count words\n    all_words <- tolower(unlist(strsplit(paste(responses, collapse = \" \"), \"\\\\W+\")))\n    all_words <- all_words[nchar(all_words) > 3]\n    all_words <- all_words[!all_words %in% stop_words]\n    \n    if (length(all_words) == 0) {\n      plot(1, type = \"n\", axes = FALSE, xlab = \"\", ylab = \"\", main = \"No words to display\")\n      return()\n    }\n    \n    word_freq <- sort(table(all_words), decreasing = TRUE)\n    top_words <- head(word_freq, 15)\n    \n    # Create horizontal bar plot\n    par(mar = c(4, 8, 2, 2), family = \"serif\")\n    \n    bp <- barplot(\n      rev(as.numeric(top_words)),\n      names.arg = rev(names(top_words)),\n      horiz = TRUE,\n      las = 1,\n      xlab = \"Frequency\",\n      col = \"#4A90E2\",\n      border = NA,\n      xlim = c(0, max(top_words) * 1.2)\n    )\n    \n    # Add vertical grid lines only\n    abline(v = pretty(0:max(top_words)), col = \"gray85\", lty = 1, lwd = 0.5)\n    \n    # Re-draw bars\n    barplot(\n      rev(as.numeric(top_words)),\n      names.arg = rev(names(top_words)),\n      horiz = TRUE,\n      las = 1,\n      col = \"#4A90E2\",\n      border = NA,\n      add = TRUE,\n      axes = FALSE\n    )\n    \n    # Add value labels\n    text(\n      x = rev(as.numeric(top_words)),\n      y = bp,\n      labels = rev(as.numeric(top_words)),\n      pos = 4,\n      cex = 0.9,\n      col = \"gray30\"\n    )\n  })\n  \n  output$text_responses <- renderUI({\n    req(rv$current_poll)\n    req(rv$show_results)\n    responses <- rv$responses[[rv$current_poll]]\n    \n    if (length(responses) == 0) {\n      return(p(\"No responses yet\", style = \"color: gray; font-style: italic;\"))\n    }\n    \n    lapply(seq_along(responses), function(i) {\n      div(\n        style = \"margin: 8px 0; padding: 10px; border-left: 3px solid #4A90E2; background-color: white;\",\n        p(responses[i], style = \"margin: 0; color: #555;\")\n      )\n    })\n  })\n  \n  # Control visibility\n  output$show_voting <- reactive({\n    !is.null(rv$current_poll) && !rv$show_results\n  })\n  outputOptions(output, \"show_voting\", suspendWhenHidden = FALSE)\n  \n  output$show_results_panel <- reactive({\n    !is.null(rv$current_poll) && rv$show_results\n  })\n  outputOptions(output, \"show_results_panel\", suspendWhenHidden = FALSE)\n  \n  output$is_multiple_choice <- reactive({\n    req(rv$current_poll)\n    polls[[rv$current_poll]]$type == \"multiple\"\n  })\n  outputOptions(output, \"is_multiple_choice\", suspendWhenHidden = FALSE)\n}\n\nshinyApp(ui = ui, server = server)","type":"text"}]
